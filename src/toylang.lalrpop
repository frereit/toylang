use std::str::FromStr;
use crate::ast::{Function, Block, Expr, Op, Stmt, Const, Val};

grammar;

pub SourceFile: Vec<Function> = {
    Function => vec![<>],
    <l:SourceFile> <f:Function> => l.into_iter().chain([f].into_iter()).collect(),
}

Function: Function = {
    "fn" <name:Identifier> "(" <params:FunctionParams> ")" <content:Block> => Function { name, params, content },
    "fn" <name:Identifier> "()" <content:Block> => Function { name, params: vec![], content },
}

FunctionParams: Vec<String> = {
    Identifier => vec![<>],
    <l:FunctionParams> "," <p:Identifier> => l.into_iter().chain([p].into_iter()).collect(),
}

Block: Vec<Stmt> = {
    "{" <l:StmtList> "}" => l,
}

StmtList: Vec<Stmt> = {
    Stmt => vec![<>],
    <l:StmtList> <s:Stmt> => l.into_iter().chain([s].into_iter()).collect(),
}

Stmt: Stmt = {
    "let" <name:Identifier> "=" <value:Expr> ";" => Stmt::Declare { name, value },
    <name:Identifier> "=" <value:Expr> ";" => Stmt::Assign { name, value },
    "if" <cond:Expr> <then:Block> => Stmt::If { cond, then, r#else: vec![] },
    "if" <cond:Expr> <then:Block> "else" <r#else:Block> => Stmt::If { cond, then, r#else },
    "while" <cond:Expr> <r#do:Block> => Stmt::While { cond, r#do },
    <e:Expr> ";" => e.into(),
}

Expr: Expr = {
    Const => <>.into(),
    Identifier => <>.try_into().expect("Invalid identifiers are caught during parsing anyway."),
    Op => <>.into(),
    <name:Identifier> "()" => Expr::Call { name, args: vec![]},
    <name:Identifier> "(" <args:FunctionArgs> ")" => Expr::Call { name, args },
}

FunctionArgs: Vec<Expr> = {
    Expr => vec![<>],
    <l:FunctionArgs> "," <a:Expr> => l.into_iter().chain([a].into_iter()).collect(),
}

Op: Op = {
    <lhs:BracketedExpr> "+" <rhs:BracketedExpr> => Op::Add(lhs, rhs),
    <lhs:BracketedExpr> "-" <rhs:BracketedExpr> => Op::Sub(lhs, rhs),
    <lhs:BracketedExpr> "*" <rhs:BracketedExpr> => Op::Mul(lhs, rhs),
    <lhs:BracketedExpr> "/" <rhs:BracketedExpr> => Op::Div(lhs, rhs),
    <lhs:BracketedExpr> ">" <rhs:BracketedExpr> => Op::Gt(lhs, rhs),
    <lhs:BracketedExpr> "==" <rhs:BracketedExpr> => Op::Eq(lhs, rhs),
    <lhs:BracketedExpr> "<" <rhs:BracketedExpr> => Op::Lt(lhs, rhs),
    <lhs:BracketedExpr> "%" <rhs:BracketedExpr> => Op::Mod(lhs, rhs),
}

BracketedExpr: Expr = {
    Val => <>.try_into().expect("Invalid identifiers are caught during parsing anyway."),
    "(" <e:Expr> ")" => e,
}

Val: Val = {
    Const => <>.into(),
    Identifier => <>.into(),
}

Const: Const = {
     r"-?[0-9]+" => Const::Integer(i64::from_str(<>).unwrap())
}

Identifier: String = r"[a-zA-Z_]+" => <>.to_owned();


