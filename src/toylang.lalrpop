use std::str::FromStr;
use crate::ast::{Block, Expr, Op, Stmt, Const, Val};

grammar;

pub Block: Block = {
    Stmt => Block::Stmt(Box::new(<>)),
    "{" <l:StmtList> "}" => Block::StmtList(l),
}

StmtList: Vec<Stmt> = {
    Stmt => vec![<>],
    <l:StmtList> <s:Stmt> => l.into_iter().chain([s].into_iter()).collect(),
}

Stmt: Stmt = {
    "let" <v:Var> "=" <e:Expr> ";" => Stmt::Assign(v, e),
    <e:Expr> ";" => Stmt::Expr(e),
    "if" <e:Expr> <b:Block> => Stmt::If(e, Box::new(b)),
    "while" <e:Expr> <b:Block> => Stmt::While(e, Box::new(b)),
    "print" <e:Expr> ";" => Stmt::Print(e),
}

Expr: Box<Expr> = {
    CalcExpr,
    <l:Term> ">" <r:Term> => Box::new(Expr::Op(Op::Gt(l, r))),
    <l:Term> "<" <r:Term> => Box::new(Expr::Op(Op::Gt(l, r))),
    <l:Term> "==" <r:Term> => Box::new(Expr::Op(Op::Gt(l, r))),
}

CalcExpr: Box<Expr> = {
    <l:Expr> "+" <r:Factor> => Box::new(Expr::Op(Op::Add(l, r))),
    <l:Expr> "-" <r:Factor> => Box::new(Expr::Op(Op::Sub(l, r))),
    Factor,
}

Factor: Box<Expr> = {
    <l:Factor> "*" <r:Term> => Box::new(Expr::Op(Op::Mul(l, r))),
    <l:Factor> "/" <r:Term> => Box::new(Expr::Op(Op::Div(l ,r))),
    Term,
}

Term: Box<Expr> = {
    Val => Box::new(Expr::Val(<>)),
    "(" <Expr> ")",
}

Val: Val = {
    Var => Val::Var(<>),
    Const => Val::Const(<>),
}

Const: Const = {
    r"[0-9]+" => Const::Integer(i64::from_str(<>).unwrap())
}

Var: String = r"[a-zA-Z_]+" => <>.to_owned();


